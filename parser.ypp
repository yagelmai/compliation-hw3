%{ 
	#include <iostream>	
	#include <stdlib.h>
	#include <stdio.h>
    #define YYSTYPE Node*
    #include "global_symbs.hpp"         // all actions and the DS
    #include "hw3_output.hpp"
    using namespace output;
    #include "parser.hpp"
	int yylex();
	extern int yylineno;
	void yyerror(const char*);
    using namespace std;
%}

//
%right ASSIGN
%left OR
%left AND
%left RELATIONAL
%left ADDITIVE
%left MULTIPLICATIVE
%right NOT
%left LPAREN
%left RPAREN
%nonassoc VOID
%nonassoc INT
%nonassoc BYTE
%nonassoc B
%nonassoc BOOL
%nonassoc TRUE
%nonassoc FALSE
%nonassoc RETURN
%nonassoc IF
%nonassoc ELSE
%nonassoc WHILE
%nonassoc BREAK
%nonassoc CONTINUE
%nonassoc SC
%nonassoc COMMA
%nonassoc LBRACE
%nonassoc RBRACE
%nonassoc ID
%nonassoc NUM
%nonassoc STRING



%%


Prog:               Funcs               										{}
;

Funcs:              FuncDecl Funcs    										    {}
                    | /* epsilon */       										{}
;

FuncDecl:           RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE   {DS->addFunction();DS->clearFormals();}//add function to DS, clear formals
;

RetType:            Type                										{DS->currentFunctionType($1->type);}
                    | VOID             										    {DS->currentFunctionType(TYPE_VOID);}
;

Formals:            FormalsList       										    {}//make sure to save all formals with negative offsets
                    | /* epsilon */       										{}
;

FormalsList:        FormalDecl          										{}//save variables at negative offsets.
                    | FormalDecl COMMA FormalsList  							{}
;

FormalDecl:         Type ID         				 							{DS->addFormal();}
;

Statements:         Statement           										{;}
                    | Statements Statement  									{;}
;

Statement:          LBRACE Statements RBRACE    								{;}
                    | Type ID SC 											    {$$ = new Statement($1,($2)->value);}
                    | Type ID ASSIGN Exp SC  									{;}
                    | ID ASSIGN Exp SC  										{;}
                    | Call SC           										{;}
                    | RETURN SC         										{;}
                    | RETURN Exp SC     										{;}
                    | IF LPAREN Exp RPAREN Statement                            {;}
                    | IF LPAREN Exp RPAREN Statement ELSE Statement             {;}
                    | WHILE LPAREN Exp RPAREN Statement                         {;}
                    | BREAK SC          										{;}
                    | CONTINUE SC       										{;}

Call:               ID LPAREN ExpList RPAREN    								{checkVariables($1,$3);$$=new Expression(DS->getFunctionType($1));}//check if variables fit called function
                    | ID LPAREN RPAREN          								{checkVariables($1,nullptr);$$=new Expression(DS->getFunctionType($1));}//check if function doesn't have variables
;

ExpList:            Exp                         								{;}
                    | Exp COMMA ExpList         								{;}
;

Type:               INT                         								{$$ = new Type(TYPE_INT);}
                    | BYTE                      								{$$ = new Type(TYPE_BYTE);}
                    | BOOL                      								{$$ = new Type(TYPE_BOOL);}
;

Exp:                LPAREN Exp RPAREN           								{$$=$2;} 
                    | Exp MULTIPLICATIVE Exp           						    {($1->type>$3->type)?($$=$1):($$=$3);} // (x = 3 if 4>5 else 2) //x=2//expression should get the bigger type
                    | Exp ADDITIVE Exp           								{($1->type>$3->type)?($$=$1):($$=$3);} // (x = 3 if 4>5 else 2) //x=2//expression should get the bigger type
                    | ID                        								{;} //Expression should get same type as ID
                    | Call                      								{$$=$1;}
                    | NUM                       								{$$=new Expression(TYPE_INT);}
                    | NUM B                     								{$$=new Expression(TYPE_BYTE);}//when does it happen?
                    | STRING                    								{$$=new Expression(TYPE_STRING);}
                    | TRUE                      								{$$=new Expression(TYPE_BOOL);}
                    | FALSE                     								{$$=new Expression(TYPE_BOOL);}
                    | NOT Exp                   								{$$=$2;}
                    | Exp AND Exp               								{$$=$1;delete (Expression*)$3;}
                    | Exp OR Exp                								{$$=$1;delete (Expression*)$3;}
                    | Exp RELATIONAL Exp             							{$$=$1;delete (Expression*)$3}
                    | LPAREN Type RPAREN Exp    								{compareTypes($2->type,$4->type);$$=new Expression($2->type);delete (Type*)$2;delete (Expression*)$4;}//check if legal 

;

%%

void yyerror(const char*)											
{
    errorSyn(yylineno); exit(1);
}

int main() 										
{
    GlobalSymbs* DS = new GlobalSymbs(); // this is our DS that contain all the symbols in the code
    //add functions print and printi to DS
	return yyparse();
}